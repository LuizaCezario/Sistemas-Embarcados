1.Escreva um código em C para gerar uma onda quadrada de 1 Hz em um pino GPIO do Raspberry Pi.

#include "gpio_sysfs.h"
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>

int pin=4;

void fim(){
  
  unsetGPIO(pin);
  exit(1);
}

int main()
{

  setGPIO_Out(pin);
  signal(SIGINT, fim);

  while(1){
  	GPIO_Write(pin,1);
  	usleep(500000);
        GPIO_Write(pin,0);
  	usleep(500000);
  }
	return 0;
}

2.Generalize o código acima para qualquer frequência possível.
#include "gpio_sysfs.h"
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>

int pin=4;

void fim(){
  
  unsetGPIO(pin);
  exit(1);
}

int main()
{

  setGPIO_Out(pin);
  signal(SIGINT, fim);
  int freq;
  printf("Digite a frequência:");
  scanf("%d", &freq);

  while(1){
  	GPIO_Write(pin,1);
  	usleep(1000000/(2*freq));
        GPIO_Write(pin,0);
  	usleep(1000000/(2*freq));
  }

}
3.Crie dois processos, e faça com que o processo-filho gere uma onda quadrada, enquanto o processo-pai lê um botão no GPIO,
aumentando a frequência da onda sempre que o botão for pressionado. A frequência da onda quadrada deve começar em 1 Hz, e 
dobrar cada vez que o botão for pressionado. A frequência máxima é de 64 Hz, devendo retornar a 1 Hz se o botão for 
pressionado novamente.

#include "gpio_sysfs.h"
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include "gpio_dev_mem.h"
#include <sys/types.h>
#include <wiringPi.h>

int pin_out=7;
int pin_in = 9;

int freq = 1;
int tempo;

void muda_freq(int sig){
  freq=freq*2;
  if (freq == 128){
    freq = 1;
  }
    tempo = 1000000/(2*freq);
}

void interrompe(){

  exit(1);
}

int main(){
  wiringPiSetup() ;
  pinMode(pin_out,OUTPUT);
  pinMode(pin_in, INPUT);

  tempo = 1000000/(2*freq);

  signal(SIGINT, interrompe);
  signal(SIGUSR1, muda_freq);

  int pid_filho = fork();

  if(getpid() ==0){

    while(1){
      digitalWrite(pin_out,HIGH);
      usleep(tempo);
      digitalWrite(pin_out,LOW);
      usleep(tempo);
    }

    return 0;

  }


  while (1) {

    if( digitalRead(pin_in)==0 ){
      usleep(50000);
      kill(pid_filho,SIGUSR1);
      while (digitalRead(pin_in)==0);
      usleep(50000);
    }


}
return 0;
}