

Para todas as questões, utilize as funções da norma POSIX (open(), close(), write(), read() e lseek()). Compile os códigos com o gcc e execute-os via terminal.

    1.Crie um código em C para escrever "Ola mundo!" em um arquivo chamado 'ola_mundo.txt'.
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>	
#include <unistd.h>	

int main(void)
{
	int fd, i = 0;
	char frase[] = "Ola mundo!";

	
	fd = open("ola_mundo.txt", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
	
	if(fd == -1){
		puts("Erro ao abrir o arquivo\n");
		exit(-1);
	}

	while(frase[i] != '\0')
		write(fd, &frase[i++], 1);
	
	close(fd);

	return 0;
}

luiza7@luiza7-Inspiron-5448:~$ gcc Olamundo_posix.c -o Olamundo_posix
luiza7@luiza7-Inspiron-5448:~$ ./Olamundo_posix
luiza7@luiza7-Inspiron-5448:~$ cat ola_mundo.txt
Ola mundo!

    2.Crie um código em C que pergunta ao usuário seu nome e sua idade, e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>	
#include <unistd.h>	
int main(int argc, const char * argv[]) {

char nome[100];
char idade[3];
int i, fd;
printf("Digite seu nome:");
scanf( "%s", nome);
printf("Digite sua idade:");
scanf( "%s", idade);
char unome[100];
for(i=0; i< 100; i++)
{
    unome[i] = nome[i];
}
const char* texto = ".txt";
const char *arq = strcat(nome,texto);
fd = open(arq, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
if(fd == -1)
{
printf( "Erro na abertura do arquivo");
exit(-1); }


while(unome[i] != '\0')
		write(fd, &unome[i++], 1);

while(idade[i] != '\0')
		write(fd, &idade[i++], 1);


close(fd);
return 0;
}

    3.Crie um código em C que recebe o nome do usuário e e sua idade como argumentos de entrada (usando as variáveis argc e *argv[]), e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>	
#include <unistd.h>	
int main(int argc, const char * argv[]) {


int i, fd;
const char* nome = argv[1];
const char* idade = argv[1];
const char* texto = ".txt";
const char *arq = strcat(argv[1],texto);
fd = open(arq, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
if(fd == -1)
{
printf( "Erro na abertura do arquivo");
exit(-1); }


write(fd, nome, strlen(nome));
write(fd, idade, strlen(idade));


close(fd);
return 0;
}

   4.Crie uma função que retorna o tamanho de um arquivo, usando o seguinte protótipo: int tam_arq_texto(char *nome_arquivo); Salve esta função em um arquivo separado chamado 'bib_arqs.c'. Salve o protótipo em um arquivo chamado 'bib_arqs.h'. Compile 'bib_arqs.c' para gerar o objeto 'bib_arqs.o'.
Arquivo bib_arqs.c:

int tam_arq_texto(char *nome_arquivo)
	    {
            int fd;
            fd = open(nome_arquivo, O_RDONLY);
             if(fd == -1)
            {
            printf( "Erro na abertura do arquivo");
            exit(0); }

            int num;
            
	    num = lseek(fd, 0, SEEK_END);

            close(fd);
	    return num;
	    }

Arquivo bib_arqs.h:

#include<stdio.h>
#include<stdlib.h>
int tam_arq_text(char *nome_arquivo);

    5.Crie uma função que lê o conteúdo de um arquivo-texto e o guarda em uma string, usando o seguinte protótipo: char* le_arq_texto(char *nome_arquivo); Repare que o conteúdo do arquivo é armazenado em um vetor interno à função, e o endereço do vetor é retornado ao final. (Se você alocar este vetor dinamicamente, lembre-se de liberar a memória dele quando acabar o seu uso.) Salve esta função no mesmo arquivo da questão 4, chamado 'bib_arqs.c'. Salve o protótipo no arquivo 'bib_arqs.h'. Compile 'bib_arqs.c' novamente para gerar o objeto 'bib_arqs.o'.

Arquivo bib_arqs.c:

void le_arq_texto(char *nome_arquivo, char *string)
{
	int fd;
	unsigned int i = 0;
	char cara, tmp;

	fd = open(nome_arquivo, O_RDONLY);

	if (fd == -1) {
		string[0] = '\0';
		return;
	}

	while (tmp = read(fd, &cara, 1)) {
		if (tmp == -1) {
			string[i] = '\0';
			return;
		}
		string[i++] = cara;
		
	}

	string[i] = '\0';
	close(fd);
}

    6.Crie um código em C que copia a funcionalidade básica do comando cat: escrever o conteúdo de um arquivo-texto no terminal. Reaproveite as funções já criadas nas questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'cat_falsificado':


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include "bib_arqs.h"

int main(int argc, char **argv)
{
	char *conteudo;
	unsigned int tam;

	tam = tam_arq_texto(argv[1]);

	conteudo = malloc(sizeof(char)*tam + 1);
	le_arq_texto(argv[1], conteudo);

	printf("%s\n", conteudo);


	return 0;
}


    7.Crie um código em C que conta a ocorrência de uma palavra-chave em um arquivo-texto, e escreve o resultado no terminal. Reaproveite as funções já criadas nas questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'busca_e_conta':

$ echo Ola mundo cruel! Ola universo ingrato! > ola.txt
$ ./busca_e_conta Ola ola.txt
$ 'Ola' ocorre 2 vezes no arquivo 'ola.txt'.


