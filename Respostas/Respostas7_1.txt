1.Quantos pipes serão criados após as linhas de código a seguir? Por quê?
(a)

int pid;
int fd[2];
pipe(fd);
pid = fork();

	Só um pipe porque o fork está depois do  pipe.

(b)

int pid;
int fd[2];
pid = fork();
pipe(fd);

	Dois pipes porque o pipe é criado depois do fork enão pai e filho terão pipes diferentes.

2.Apresente mais cinco sinais importantes do ambiente Unix, além do SIGSEGV, SIGUSR1, SIGUSR2, SIGALRM e SIGINT. Quais são
suas características e utilidades?

SIGHUP - sinal que é emitido quando um processo é desconectado do terminal ou um processo chefe termina sua execução.

SIGQUIT - sinal que é emitido para um processo quando uma tecla de abandono do teclado é acionada.

SIGILL - sinal que é emitido quando uma instrução de um processo é detectada.

SIGKILL - sinal que é emitido pelo sitema para matar um processo.

SIGPIPE - sinal que é emitido quando um processo tenta escrever em um pipe, porém ele não está aberto para leitura.

3.Considere o código a seguir:

#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

void tratamento_alarme(int sig)
{
	system("date");
	alarm(1);
}

int main()
{
	signal(SIGALRM, tratamento_alarme);
	alarm(1);
	printf("Aperte CTRL+C para acabar:\n");
	while(1);
	return 0;
}
Sabendo que a função alarm() tem como entrada a quantidade de segundos para terminar a contagem, quão precisos são os 
alarmes criados neste código? De onde vem a imprecisão? Este é um método confiável para desenvolver aplicações em tempo 
real?
Tem precisão de aproximadamnete dezenas de milisegundos, mas essa precisão muda de acordo com o número de processos que o
processador roda paralelamente. Não é o melhor método para desenvolver aplicações em tempo real.