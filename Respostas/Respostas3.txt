
1. Crie um "Olá mundo!" em C.

#include <stdio.h>

 int main ()

	{
		
	    printf("Ola mundo! \n");

	    return 0;

	}

2.Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':

#include <stdio.h>

 int main ()

	{
		char nome[30];

	    printf( "Digite seu nome\n");

	    scanf("%s", nome);

	    printf("Ola %s" , nome);

	    return 0;

	}

3. Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.

./Olaeu
Digite seu nome
Luiza Carneiro
Ola Luiza 

(b) Se o usuário insere mais de um nome entre aspas duplas. 

./Olaeu
Digite seu nome
"Luiza Carneiro"
Ola "Luiza 

c) Se é usado um pipe. Por exemplo:

echo Luiza | ./Olaeu 
Digite seu nome
Ola Luiza 

(d) Se é usado um pipe com mais de um nome. Por exemplo:

 echo Luiza Carneiro | ./Olaeu
Digite seu nome
Ola Luiza 


(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:

echo "Luiza Carneiro" | ./Olaeu
Digite seu nome
Ola Luiza 


(f) Se é usado o redirecionamento de arquivo. Por exemplo:

./Olaeu < ola.txt
Digite seu nome
Ola Ola 


    4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':

#include <stdio.h>

int main(int argc, char **argv)
{
	printf("Olá %s. \n", argv[1]);
	return 0;
}

./Olaeu2 Luiza
Olá Luiza. 

   5. Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.

./Olaeu2 Luiza Carneiro
Olá Luiza. 


(b) Se o usuário insere mais de um nome entre aspas duplas. 

./Olaeu2 "Luiza Carneiro"
Olá Luiza Carneiro. 

(c) Se é usado um pipe. 

echo Luiza | ./Olaeu2
Olá (null). 


(d) Se é usado um pipe com mais de um nome. 

echo Luiza Carneiro | ./Olaeu2
Olá (null). 


(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:

$ echo Eu Mesmo | ./ola_usuario_2

(f) Se é usado o redirecionamento de arquivo. Por exemplo:

$ echo Ola mundo cruel! > ola.txt
$ ./ola_usuario_2 < ola.txt

    Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':

$ ./ola_usuario_3 Eu
$ Ola Eu
$ Numero de entradas = 2
   
   7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':

$ ./ola_argumentos Eu Mesmo e Minha Pessoa
$ Argumentos: Eu Mesmo e Minha Pessoa

    8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo: int Num_Caracs(char *string); Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

   9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':

$ ./ola_num_caracs_1 Eu Mesmo
$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
$ Argumento: Eu / Numero de caracteres: 2
$ Argumento: Mesmo / Numero de caracteres: 5

   10. Crie um Makefile para a questão anterior.

    11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':

$ ./ola_num_caracs_2 Eu Mesmo
$ Total de caracteres de entrada: 25

    12. Crie um Makefile para a questão anterior.

